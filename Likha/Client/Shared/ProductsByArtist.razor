@inject IProductService ProductService
@inject IToastService ToastService
@inject NavigationManager NavManager
@implements IDisposable

@foreach (var product in AllProductByArtist)
{
    <div class="col">
        <div class="art-card p-md-3">
            <a href="/product/@product.Id">
                <img src="@product.Image" alt="" class="art-img">
                <div class="card-body">
                    <span class="tag">Painting</span>
                    <span class="tag">Religous</span>
                    <h5 class="card-title my-md-2">@product.Title</h5>
                    <h6 class="card-subtitle my-md-2">@product.Artist</h6>
                    <p class="card-text d-none d-xl-block">
                        @MaximizaDescription(product.Description)
                    </p>
                    <h6 class="card-subtitle">&#8369;@product.Price</h6>
                </div>
            </a>
            <div class="px-3">
                <a @onclick="() => OnClickEdit(product)" class="edit-link">Edit</a>
                <a @onclick="() => OnClickDelete(product)" class="edit-link">Delete</a>
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public List<Product> AllProductByArtist { get; set; }
    [Parameter]
    public EventCallback<Product> OnEdit { get; set; }

    private int MaxLength = 35;

    private string MaximizaDescription(string Description)
    {
        if (Description.Length > MaxLength)
        {
            Description = Description.Substring(0, MaxLength) + "...";
            return Description;
        }
        return Description;
    }

    private async Task OnClickEdit(Product Product)
    {
        await OnEdit.InvokeAsync(Product);
    }

    private async Task OnClickDelete(Product Product)
    {
        await ProductService.DeleteProduct(Product);
        ToastService.ShowSuccess("Succesfully Deleted", "Product Deleted");
        NavManager.NavigateTo("");
    }

    protected override void OnInitialized()
    {
        ProductService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.OnChange -= StateHasChanged;
    }
}

