@inject IUserService UserService
@inject IUserRepository UserRepo
@inject IAddressService AddressService
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager
@inject IToastService ToastService
@implements IDisposable

<div class="d-block d-xl-none @tableRemove">
    <h5 class="address-book my-3">Address Book</h5>
    @foreach (var myAddress in AddressService.Addresses)
    {
        <div class="address-box">
            <p class="default">@myAddress.Title</p>
            <p class="address-content">@myAddress.FirstName @myAddress.LastName</p>
            <p class="address-content">@myAddress.Street</p>
            <p class="address-content">@myAddress.Barangay - @myAddress.Town - @myAddress.Province</p>
            <p class="address-content">@myAddress.Phone</p>
            <a @onclick="() => EditLink(myAddress.Id)" class="edit-link edit-end">Edit</a>
            <a @onclick="() => DeleteLink(myAddress.Id)" class="delete-link edit-end">Delete</a>
        </div>
    }
    <div class="d-flex w-100 justify-content-end my-4">
        <button class="save-button" @onclick="AddAddress">Add New Address</button>
    </div>
</div>
<div class="account-container-xl d-block d-xl-none  @remove">
    <div class="account-box-xl d-flex flex-column align-items-center">
        <img src="@(newUser.Image == null ? defaultImage : newUser.Image)"
             alt="" class="account-image">
        <h5 class="account-edit">Add Address</h5>
    </div>
    <div class="edit-container mx-3">
       <AddressForm newUser="newUser" Cancel="Cancel" AddressId="ExistingAddress" />
    </div>
</div>
<div class="body-container p-4 container-fluid d-none d-xl-block">
    <h5 class="address-book  @tableRemove">Address Book</h5>
    <div class="address-box d-flex flex-column justify-content-center  @tableRemove">
        <table class="w-100">
            <tr>
                <th>Address Title</th>
                <th>Full Name</th>
                <th>Address</th>
                <th>Post-code</th>
                <th>Phone Number</th>
            </tr>
            @foreach (var myAddress in AddressService.Addresses)
            {
                <tr>
                    <td><b>@myAddress.Title</b></td>
                    <td>@myAddress.FirstName @myAddress.LastName</td>
                    <td>@myAddress.Street</td>
                    <td>@myAddress.Barangay - @myAddress.Town - @myAddress.Province</td>
                    <td>@myAddress.Phone</td>

                    <td><a @onclick="() => EditLink(myAddress.Id)" class="edit-link">Edit</a></td>
                    <td><a @onclick="() => DeleteLink(myAddress.Id)" class="delete-link">Delete</a></td>
                </tr>
            }
        </table>
        <div class="d-flex w-100 justify-content-end">
            <button class="save-button" @onclick="AddAddress">Add New Address</button>
        </div>
    </div>

    <div class="account-container row  @remove">
        <div class="account-box d-flex flex-column align-items-center">
            <img src="@(newUser.Image == null ? defaultImage : newUser.Image)"
                 alt="" class="account-image">
            <h5 class="account-edit">Add Address</h5>
        </div>
        <div class="edit-container">
           <AddressForm newUser="newUser" Cancel="Cancel" AddressId="ExistingAddress"/>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public User newUser { get; set; }
    string defaultImage = "../css/default-profile.png";
    string remove = "d-none";
    string tableRemove = string.Empty;
    int ExistingAddress = 0;


    private void EditLink(int AddressId)
    {
        ExistingAddress = AddressId;
        tableRemove = "d-none";
        remove = string.Empty;
    }

    private async void DeleteLink(int AddressId)
    {
        var address = await AddressService.GetAddress(AddressId);
        await AddressService.DeleteAddress(address);
        ToastService.ShowSuccess("Succesfully Deleted", "Address Deleted");
        NavManager.NavigateTo("");
    }

    private void AddAddress()
    {
        tableRemove = "d-none";
        remove = string.Empty;
    }

    private void Cancel()
    {
        tableRemove = string.Empty;
        remove = "d-none";
        ExistingAddress = 0;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (newUser.Id != 0)
        {
            await AddressService.LoadAddresses(newUser.Id);
        }
    }

    protected override void OnInitialized()
    {
        UserService.OnChange += StateHasChanged;
        AddressService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        UserService.OnChange -= StateHasChanged;
        AddressService.OnChange -= StateHasChanged;
    }
}
