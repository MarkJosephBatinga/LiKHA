@page "/login"
@inject ILocalStorageService LocalStorage
@inject IUserService UserService
@inject IUserRepository UserRepo
@inject AuthenticationStateProvider AuthState
@inject NavigationManager Navigate
@inject IToastService ToastService
@inject IJSRuntime JsRuntime

<div class="container-fluid main-container d-flex justify-content-center">
    <div class="login-container d-flex flex-column align-items-center">
        <h3 class="logo">LiKHA</h3>
        <div class="btn-box d-flex justify-content-around">
            <button class="btn btn-switch" @onclick='() => ChangeForm("login")'>Login</button>
            <button class="btn btn-switch" @onclick='() => ChangeForm("register")'>Register</button>
        </div>
        <div class="@LoginString">
            <EditForm Model="loginUser" OnValidSubmit="HandleLogin" class="form-box d-flex flex-column w-100">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <ValidationMessage For="() => loginUser.Email" />
                <label for="login_username">Email/Username</label>
                <input type="text" @bind-value="loginUser.Email" id="login_username" class="input-box">

                <ValidationMessage For="() => loginUser.Password" />
                <label for="login_password">Password</label>
                <input type="password" @bind-value="loginUser.Password" id="login_password" class="input-box">


                <button type="submit">Login</button>
            </EditForm>
        </div>
        <div class="@RegisterString">
            <EditForm Model="registerUser" OnValidSubmit="HandleRegister" class="form-box d-flex flex-column w-100">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <ValidationMessage For="() => registerUser.Email" />
                <label for="username">Email</label>
                <input type="text" @bind-value="registerUser.Email" id="username" class="input-box">

                <ValidationMessage For="() => registerUser.Password" />
                <label for="password">Password</label>
                <input type="password" @bind-value="registerUser.Password" id="password" class="input-box">

                <ValidationMessage For="() => registerUser.LastName" />
                <label for="last_name">Last Name</label>
                <input type="text" @bind-value="registerUser.LastName" id="last_name" class="input-box">

                <ValidationMessage For="() => registerUser.FirstName" />
                <label for="first_name">First Name</label>
                <input type="text" @bind-value="registerUser.FirstName" id="first_name" class="input-box">

                <ValidationMessage For="() => registerUser.Phone" />
                <label for="phone">Phone Number</label>
                <input type="text" @bind-value="registerUser.Phone" id="phone" class="input-box">


                <button type="submit">Register</button>
            </EditForm>
        </div>
        <a href="" class="forgot-link">Forgot Password</a>
    </div>
</div>

@code {
    private User user = new User();
    private LoginUser loginUser = new LoginUser();
    private RegisterUser registerUser = new RegisterUser();
    private string LoginString = string.Empty;
    private string RegisterString = "d-none";

    private async void HandleLogin()
    {
        var EncryptedUser = UserRepo.LoginEncrypt(loginUser);
        var DbUser = await UserService.LoginUser(EncryptedUser);
        if (DbUser.Id == 0)
        {
            ToastService.ShowError("Wrong Credentials", "Wrong Username or password Please try again :(");
        }
        else
        {
            await LocalStorage.SetItemAsStringAsync("username", DbUser.Email);
            await AuthState.GetAuthenticationStateAsync();
            Navigate.NavigateTo("");
        }
    }

    private async void HandleRegister()
    {
        User encryptedUser = UserRepo.PasswordEncrypt(registerUser);
        await JsRuntime.InvokeVoidAsync("console.log", encryptedUser);
        List<User> result = await UserService.RegisterUser(encryptedUser);
        await JsRuntime.InvokeVoidAsync("console.log", result);
    }

    private void ChangeForm(string switchBtn)
    {
        if(switchBtn == "login")
        {
            LoginString = string.Empty;
            RegisterString = "d-none";
        }
        else
        {
            LoginString = "d-none";
            RegisterString = string.Empty;
        }
    }
}
