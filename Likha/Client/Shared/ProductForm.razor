@inject ICategoryService CategoryService
@inject IUserRepository UserRepo
@inject IProductService ProductService
@inject NavigationManager NavManager
@inject IToastService ToastService
@inject IJSRuntime JsRuntime
@implements IDisposable

<div class="account-container mx-xl-5">
    <div class="edit-container">
        <div class="row">
            <EditForm Model="newProduct" OnValidSubmit="ProductId == 0 ? SubmitProduct: SubmitEdit" class="edit-form w-100">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <p class="edit-title">@(ProductId == 0 ? "Add Product Image" : "Edit Product")</p>
                <label class="label-form" for="product-image">Select Image</label>
                <InputFile type="file" OnChange="OnFileChange"
                           accept="image/x-png,image/gif,image/jpeg,image/avi,image/webp" name="product-image"
                           id="product-image" />
                <ValidationMessage For="() => newProduct.Image" /><br>
                <div class="col-xl">
                    <p class="edit-title">Title</p>
                    <InputText @bind-Value="newProduct.Title" class="input-form" type="text" placeholder="@EditProduct.Title"/>
                    <ValidationMessage For="() => newProduct.Title" /><br>

                    <p class="edit-title">Artist</p>
                    <p class="input-form">@user.FirstName</p>
                    <p class="input-form">@user.LastName</p>
                </div>
                <div class="col-xl">
                    <p class="edit-title">Price</p>
                    <InputNumber class="input-form" @bind-Value="newProduct.Price" placeholder="@EditProduct.Price"/>
                    <ValidationMessage For="() => newProduct.Price" /><br>

                    <p class="edit-title">Category</p>
                    <InputSelect @bind-Value="newProduct.CategoryId" class="input-form">
                        <option value="0" selected>Select A Category</option>
                        @foreach (var category in AllCategories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => newProduct.CategoryId" /><br>

                    <p class="edit-title">Description</p>
                    <InputTextArea class="input-form" @bind-Value="newProduct.Description" rows="3" cols="100" placeholder="@EditProduct.Description"></InputTextArea>
                    <ValidationMessage For="() => newProduct.Description" /><br>
                </div>
                <div class="save-box d-flex w-100 justify-content-end">
                    <a class="save-button mx-4  @removeButton" @onclick="OnClickCancel">Cancel</a>
                    <button class="save-button @removeButton" type="submit">Upload Product</button>
                    <img src="./css/upload.svg" class="@upload" alt="uploading"/>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public User user { get; set; }
    [Parameter]
    public int ProductId { get; set; }

    [Parameter]
    public EventCallback Cancel { get; set; }

    private List<Category> AllCategories = new List<Category>();
    private Product EditProduct = new Product();
    private AddProduct newProduct = new AddProduct();
    string removeButton = string.Empty;
    string upload = "d-none";

    private async void SubmitProduct()
    {
        upload = string.Empty;
        removeButton = "d-none";
        newProduct.Artist = $"{user.FirstName} {user.LastName}";
        newProduct.ArtistId = user.Id;
        var product = UserRepo.AddProduct(newProduct);
        var productList = await ProductService.AddProduct(product);
        if (productList != null)
        {
            ToastService.ShowSuccess("New Product Successfully Added");
            upload = "d-none";
            removeButton =string.Empty;
            NavManager.NavigateTo("");
        }
    }

    private async void SubmitEdit()
    {
        upload = string.Empty;
        removeButton = "d-none";
        newProduct.Artist = $"{user.FirstName} {user.LastName}";
        newProduct.ArtistId = user.Id;
        var product = UserRepo.AddProduct(newProduct);
        product.Id = ProductId;
        var productList = await ProductService.EditProduct(product);
        if (productList != null)
        {
            ToastService.ShowSuccess("Product Successfully Updated");
            upload = "d-none";
            removeButton = string.Empty;
            NavManager.NavigateTo("");
        }
    }


    protected override async Task OnInitializedAsync()
    {
        AllCategories = await CategoryService.LoadCategories();
        if (ProductId != 0)
        {
            EditProduct = await ProductService.LoadProduct(ProductId);
            newProduct.Title = EditProduct.Title;
            newProduct.Artist = EditProduct.Artist;
            newProduct.Description = EditProduct.Description;
            newProduct.Price = EditProduct.Price;

        }
    }

    private void OnClickCancel()
    {
        Cancel.InvokeAsync();
    }

    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = e.File.ContentType;
        long maxFileSize = 1024 * 1024 * 15;

        var resizedImage = await e.File.RequestImageFileAsync(format, 1000, 1000);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream(maxFileSize).ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        newProduct.Image = imageData;
    }


    protected override void OnInitialized()
    {
        ProductService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.OnChange -= StateHasChanged;
    }
}
