@inject IUserService UserService
@inject IUserRepository UserRepo 
@implements IDisposable
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JsRuntime
@inject AuthenticationStateProvider AuthState
@inject NavigationManager NavManager

<div class="account-container-xl d-block d-xl-none">
    <div class="account-box-xl d-flex flex-column align-items-center">
        <img src="@(newUser.Image == null ? defaultImage : newUser.Image) "
             alt="" class="account-image">
        <h5 class="account-edit">Edit Account</h5>
    </div>
    <div class="edit-container mx-3">
        <EditForm Model="updateUser" OnValidSubmit="OnUpdate">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="row">
                <div class="col-xl">
                    <p class="edit-title">Edit Profile Picture</p>
                    <label class="label-form" for="profile-xl">Select Image</label>
                    <InputFile class="input-form" type="file" OnChange="OnFileChange"
                               accept="image/x-png,image/gif,image/jpeg" name="profile"
                               id="profile-xl" /><br>

                    <p class="edit-title">Full Name</p>
                    <label class="label-form" for="last_name-xl">Last Name</label>
                    <input class="input-form" @bind-value="updateUser.LastName" type="text" name="last_name" placeholder="@newUser.LastName" id="last_name-xl">
                    <ValidationMessage For="() => updateUser.LastName" />
                    <br>


                    <label class="label-form" for="first_name-xl">First Name</label>
                    <input class="input-form" @bind-value="updateUser.FirstName" type="text" name="first_name" placeholder="@newUser.FirstName" id="first_name-xl">
                    <ValidationMessage For="() => updateUser.FirstName" />


                    <p class="edit-title">Email Address</p>
                    <input class="input-form" @bind-value="updateUser.Email" type="text" placeholder="@newUser.Email" name="email">
                    <ValidationMessage For="() => updateUser.Email" />
                </div>
                <div class="col-xl">
                    <p class="edit-title">Phone Number</p>
                    <input class="input-form" @bind-value="updateUser.Phone" type="text" name="phone" placeholder="@newUser.Phone">
                    <ValidationMessage For="() => updateUser.Phone" />

                    <p class="edit-title">Gender</p>
                    <InputRadioGroup class="input-form" @bind-Value="updateUser.Gender">
                        <InputRadio Value="Male" />Male <br>
                        <InputRadio Value="Female" />Female
                    </InputRadioGroup>

                    <p class="edit-title">Password</p>
                    <input type="password" @bind-value="updateUser.Password" class="input-form">
                    <ValidationMessage For="() => updateUser.Password" />
                </div>
            </div>
            <div class="save-box d-flex w-100 justify-content-center">
                <button class="save-button" type="submit">Save Changes</button>
            </div>
        </EditForm>
    </div>
</div>
<div class="body-container p-4 container-fluid d-none d-xl-block">
    <div class="account-container row">
        <div class="account-box d-flex flex-column align-items-center">
            <img src="@(newUser.Image == null ? defaultImage : newUser.Image)" alt="" class="account-image">
            <h5 class="account-edit">Edit Account</h5>
        </div>
        <div class="edit-container">
            <EditForm Model="updateUser" OnValidSubmit="OnUpdate">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="row">
                    <div class="col">
                        <p class="edit-title">Edit Profile Picture</p>
                        <label class="label-form" for="profile">Select Image</label>
                        <InputFile class="input-form" type="file" OnChange="OnFileChange"
                                   accept="image/x-png,image/gif,image/jpeg" name="profile"
                                   id="profile" /><br>

                        <p class="edit-title">Full Name</p>
                        <label class="label-form" for="last_name">Last Name</label>
                        <input class="input-form" @bind-value="updateUser.LastName" type="text" name="last_name" placeholder="@newUser.LastName" id="last_name">
                        <ValidationMessage For="() => updateUser.LastName" /><br>

                        <label class="label-form" for="first_name">First Name</label>
                        <input class="input-form" @bind-value="updateUser.FirstName" type="text" name="first_name" placeholder="@newUser.FirstName" id="first_name">
                        <ValidationMessage For="() => updateUser.FirstName" />

                        <p class="edit-title">Email Address</p>
                        <input class="input-form" @bind-value="updateUser.Email" type="text" name="email" placeholder="@newUser.Email">
                        <ValidationMessage For="() => updateUser.Email" />
                    </div>
                    <div class="col">
                        <p class="edit-title">Phone Number</p>
                        <input class="input-form" @bind-value="updateUser.Phone" type="text" name="phone" placeholder="@newUser.Phone">
                        <ValidationMessage For="() => updateUser.Phone" />

                        <p class="edit-title">Gender</p>
                        <InputRadioGroup class="input-form" @bind-Value="updateUser.Gender">
                            <InputRadio Value="Male" />Male
                            <InputRadio Value="Female" />Female
                        </InputRadioGroup>

                        <p class="edit-title">Password</p>
                        <input type="password" @bind-value="updateUser.Password" class="input-form">
                        <ValidationMessage For="() => updateUser.Password" />
                    </div>
                </div>
                <div class="save-box d-flex w-100 justify-content-end">
                    <button class="save-button" type="submit">Save Changes</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public User newUser { get; set; }
    private RegisterUser updateUser = new RegisterUser();
    string Male = "male";
    string Female = "female";
    string defaultImage = "../css/default-profile.png";

    private async void OnUpdate()
    {
        updateUser.Id = newUser.Id;
        User encryptedUser = UserRepo.PasswordEncrypt(updateUser);
        List<User> result = await UserService.UpdateUser(encryptedUser);


        await LocalStorage.SetItemAsStringAsync("username", encryptedUser.Email);
        await AuthState.GetAuthenticationStateAsync();
        NavManager.NavigateTo("");
    }

    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = e.File.ContentType;
        long maxFileSize = 1024 * 1024 * 15;

        var resizedImage = await e.File.RequestImageFileAsync(format, 1000, 1000);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream(maxFileSize).ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        updateUser.Image = imageData;
    }

    protected override void OnInitialized()
    {
        if(updateUser != null)
        {
            updateUser.LastName = newUser.LastName;
            updateUser.FirstName = newUser.FirstName;
            updateUser.Phone = newUser.Phone;
            updateUser.Email = newUser.Email;
            updateUser.Gender = newUser.Gender;
            updateUser.Password = newUser.Password;

        }
        UserService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        UserService.OnChange -= StateHasChanged;
    }
}
