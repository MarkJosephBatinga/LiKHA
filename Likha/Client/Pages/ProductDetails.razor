@page "/product/{Id:int}"
@inject IProductService ProductService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject IUserService UserService
@inject ICartService CartService
@inject ICategoryService CategoryService
@inject IJSRuntime JsRuntime

<div class="container-fluid">
    <div class="image-container d-flex justify-content-center p-4">
        <img src="@product.Image"
             class="art-full-image">
    </div>
    <div class="art-details container-fluid mt-3 p-md-5 p-3 py-5">
        <div class="row">
            <div class=" col-md-6">
                <h3 class="art-title">@product.Title</h3>
                <p class="art-descriptions">@product.Description</p>
            </div>
            <div class="col-md-6 d-md-flex flex-column align-items-end">
                <p class="art-price">@product.Price</p>
                <button class="btn btn-md btn-cart" @onclick="AddToCart">Add to Cart</button>
            </div>
        </div>
    </div>
    <div class="container-fluid artist-container mt-3 px-md-5 p-3">
        <div class="row">
            <div class="col-6 d-flex align-items-center justify-content-start">
                <h3 class="artist m-0">@product.Artist</h3>
            </div>
            <div class="col-6 d-flex flex-column align-items-end justify-content-center">
                <button class="btn btn-md btn-follow">FOLLOW</button>
            </div>
        </div>
    </div>
    <div class="container-fluid my-3">
        <div class="row row-cols-xl-3 row-cols-2 g-3">
            <ProductDetailsList AllProducts="allProducts" ProductId="product.Id" />
        </div>
    </div>
</div>


@code {
    private Product product = new Product();
    private List<Product> allProducts = new List<Product>();
    private List<Category> Categories = new List<Category>();
    private User user = new User();
    private Cart newCart = new Cart();

    [Parameter]
    public int Id { get; set; }

    private async Task AddToCart()
    {
        var Username = await LocalStorage.GetItemAsStringAsync("username");
        if (string.IsNullOrEmpty(Username))
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            newCart.ProductId = product.Id;
            var username = await LocalStorage.GetItemAsStringAsync("username");
            user = await UserService.GetUser(username);
            newCart.UserId = user.Id;
            newCart.TotalPrice = product.Price;
            var dateNow = DateTime.Now;
            newCart.DateAdded = dateNow.Date;
            var carts = await CartService.AddCart(newCart);
            if (carts != null)
            {
                ToastService.ShowSuccess($"{product.Title} has been added to cart", "Product Added to Cart");
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        product = await ProductService.LoadProduct(Id);
        allProducts = await ProductService.LoadProducts();
        foreach (var product in allProducts)
        {
            var category = Categories.Where(c => c.Id == product.CategoryId).FirstOrDefault();
            if (category != null)
            {
                product.Category = category.Name;
            }
        }
    }

    protected override void OnInitialized()
    {
        ProductService.OnChange += StateHasChanged;
        UserService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.OnChange -= StateHasChanged;
        UserService.OnChange -= StateHasChanged;
    }
}
